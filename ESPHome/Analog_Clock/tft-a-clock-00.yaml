substitutions:
  esphome_name: "tft-a-clock-00"
  esphome_friendly_name: "TFT-Analog-Clock-00"
  
  # Display
  SCREEN_WIDTH: "128"
  SCREEN_HEIGTH: "160"
  RADIUS: "63"
  SIZE_PoetsenOne: "15"

globals:
  - id: hrs
    type: unsigned int
    initial_value: "9"
  - id: mins
    type: unsigned int
    initial_value: "25"
  - id: secs
    type: unsigned int
    initial_value: "5"

# ESP32 base config
esphome:
  name: ${esphome_name}
  friendly_name: ${esphome_friendly_name}

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key_omjk

ota:
  password: !secret ota_pass_omjk

wifi:
  networks:
  - ssid: !secret wifi_ssid_omjk
    password: !secret wifi_password_omjk
  - ssid: !secret wifi_ssid_sekt
    password: !secret wifi_password_sekt

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${esphome_name} Fallback Hotspot"
    password: !secret ap_password_omjk
    
captive_portal:

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address ${esphome_name}"
    ssid:
      name: "Connected SSID ${esphome_name}"
    bssid:
      name: "Connected BSSID ${esphome_name}"
    mac_address:
      name: "Mac Wifi Address ${esphome_name}"

button:
  - platform: restart
    name: "Restart ${esphome_name}"

# Use Color LCD with ESP in Home Assistant "https://www.youtube.com/watch?v=3ZVUakue2zA"
# TFT   -> ESP32
# 1 RST -> GPIO22
# 2 CS  -> GPIO5
# 3 D/C -> GPIO21
# 4 DIN -> GPIO23
# 5 CLK -> GPIO18
# 6 VCC -> 5V
# 7 BL  -> 3V3 (PWM)
# 8 GND -> GND 


# Get the time from Home Assistant to sync the onboard real-time clock.
time:
  - platform: homeassistant
    id: esptime

# Define a PWM output on the TFT
output:
  - platform: ledc
    pin: GPIO13
    id: backlight_pwm
# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: backlight_pwm
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON

font:
  - file: "gfonts://Poetsen One"
    id: PoetsenOne${SIZE_PoetsenOne}
    size: ${SIZE_PoetsenOne}

  - file: "gfonts://Roboto"
    id: roboto
    size: 30

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19

color:
  - id: yellow
    red: 100%
    green: 100%
    blue: 0%

  - id: red
    red: 100%
    green: 0%
    blue: 0%

display:
  - platform: st7735
    model: "INITR_18BLACKTAB"
    reset_pin: GPIO22
    cs_pin: GPIO5
    dc_pin: GPIO21
    rotation: 180
    device_width: 128
    device_height: 160
    col_start: 0
    row_start: 0
    eight_bit_color: True
    update_interval: 1s

    lambda: |-
      int x_center = min(${SCREEN_HEIGTH}, ${SCREEN_WIDTH})/2;
      int y_center = min(${SCREEN_HEIGTH}, ${SCREEN_WIDTH})/2;
      int o_radius = min(${SCREEN_HEIGTH}, ${SCREEN_WIDTH})/2-1;
      int i_radius = 2;

      //it.circle(x_center, y_center, o_radius);
      it.circle(x_center, y_center, i_radius);

      for (int j=1; j<=60; j++){
        float angle = j*6;
        angle = angle * 0.0174533;
        float x1 = x_center + (sin(angle) * o_radius);
        float y1 = y_center + (cos(angle) * o_radius);
        float x2 = x_center + (sin(angle) * (o_radius-2));
        float y2 = y_center + (cos(angle) * (o_radius-2));
        it.line(x1,y1,x2,y2);
      } 

      for (int j=1; j<=60; j++){
        float angle = j*6*5;
        angle = angle * 0.0174533;
        float x1 = x_center + (sin(angle) * o_radius);
        float y1 = y_center + (cos(angle) * o_radius);
        float x2 = x_center + (sin(angle) * (o_radius-7));
        float y2 = y_center + (cos(angle) * (o_radius-7));
        it.line(x1,y1,x2,y2);
      } 

      it.strftime(x_center, 145, id(roboto), id(yellow),  TextAlign::CENTER, "%H:%M", id(esptime).now());

      it.printf(x_center, y_center - y_center + ${SIZE_PoetsenOne}, id(PoetsenOne${SIZE_PoetsenOne}), id(red), TextAlign::CENTER, "12");
      it.printf(x_center + x_center - ${SIZE_PoetsenOne}, y_center, id(PoetsenOne${SIZE_PoetsenOne}), id(red), TextAlign::CENTER, "3");
      it.printf(x_center, y_center + y_center - ${SIZE_PoetsenOne}, id(PoetsenOne${SIZE_PoetsenOne}), id(red), TextAlign::CENTER, "6");
      it.printf(x_center - x_center + ${SIZE_PoetsenOne}, y_center, id(PoetsenOne${SIZE_PoetsenOne}), id(red), TextAlign::CENTER, "9");
